package com.hx.service;

import com.hx.thrift.HelloService;
import com.wealoha.thrift.*;
import org.apache.thrift.TException;
import org.apache.thrift.TServiceClient;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.transport.TTransport;

import java.util.Arrays;
import java.util.List;

public class Test {
    public static void main(String[] args) throws Exception{
        PoolConfig config = new PoolConfig();
        config.setFailover(true); // optional
        config.setTimeout(30000); // optional
        config.setMinIdle(3);
        config.setMaxTotal(30);
        List<ServiceInfo> serverList = Arrays.asList( //
                new ServiceInfo("localhost", 8090));

        ThriftClientPool<HelloService.Client> pool = new ThriftClientPool<>(serverList,
                new ThriftClientFactory() {
                    @Override
                    public TServiceClient createClient(TTransport transport) {
                        return new HelloService.Client(new TBinaryProtocol(transport));
                    }
                }, config);

        // just call thrift
        try {
            HelloService.Iface iFace = pool.iface();
            String response = iFace.sayHello("Hello!");
            System.out.println("response====>"+response);
        } catch (Throwable e) {
            e.printStackTrace();
        }

        // or call like this
        try (ThriftClient<HelloService.Client> thriftClient = pool.getClient()) {
            // get Iface generated by Thrift
            HelloService.Iface iFace = thriftClient.iFace();

            String response = iFace.sayHello("Hello!");
            System.out.println("response====>"+response);
            response = iFace.sayHello("Hello again!");
            System.out.println("response====>"+response);
            // finish must be called at last
            thriftClient.finish();
        } catch (TException e) {
            e.printStackTrace();
        }
    }

}
